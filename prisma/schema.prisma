// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @map("_id") @default(auto()) @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @map("_id") @default(auto()) @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @map("_id") @default(auto()) @db.ObjectId
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  createdSubreddits Subreddit[]    @relation("CreatedBy")
  subscriptions     Subscription[] @relation("UserSubscriptions")

  username String? @unique

  image       String?
  accounts    Account[]
  sessions    Session[]
  Post        Post[]
  Comment     Comment[]
}

model Subreddit {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId   String? @db.ObjectId
  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[] @relation("SubredditSubscriptions")

  // @@index([name]) - Remove this as @unique already creates an index
}

model Subscription {
  id           String   @id @map("_id") @default(auto()) @db.ObjectId
  userId       String   @db.ObjectId
  subredditId  String   @db.ObjectId
  user         User     @relation("UserSubscriptions", fields: [userId], references: [id])
  subreddit    Subreddit @relation("SubredditSubscriptions", fields: [subredditId], references: [id])

  @@unique([userId, subredditId])
}

model Post {
  id          String    @id @map("_id") @default(auto()) @db.ObjectId
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String    @db.ObjectId
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String    @db.ObjectId
  comments    Comment[]
}

model Comment {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId

  replyToId String?  @db.ObjectId
  replyTo   Comment? @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  
}
